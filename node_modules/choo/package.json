{
  "name": "choo",
  "version": "4.0.0-0",
  "description": "A 5kb framework for creating sturdy frontend applications",
  "main": "index.js",
  "scripts": {
    "deps": "./scripts/test deps",
    "test:electron": "./scripts/test electron",
    "test:cov": "./scripts/test cov",
    "test:server": "./scripts/test server",
    "test:browser": "./scripts/test browser",
    "test:browser-local": "./scripts/test browser-local",
    "preversion": "if [ ! -z $SKIP_TEST ]; then npm run test:browser; fi",
    "test": "npm run test:electron",
    "build:dev": "./scripts/build dev",
    "build:min": "./scripts/build min",
    "prepublish": "npm run build:dev && npm run build:min",
    "instrument:discify": "./scripts/instrument discify",
    "instrument:minified": "./scripts/instrument minified",
    "instrument:gzip": "./scripts/instrument gzip"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/yoshuawuyts/choo.git"
  },
  "keywords": [
    "client",
    "frontend",
    "framework",
    "minimal",
    "composable",
    "tiny"
  ],
  "files": [
    "index.js",
    "http.js",
    "html.js",
    "dist/"
  ],
  "license": "MIT",
  "dependencies": {
    "barracks": "^8.1.1",
    "document-ready": "~1.0.2",
    "global": "^4.3.0",
    "hash-match": "^1.0.2",
    "nanoraf": "^2.1.1",
    "sheet-router": "^4.0.0-0",
    "xhr": "^2.2.0",
    "xtend": "^4.0.1",
    "yo-yo": "^1.2.2"
  },
  "devDependencies": {
    "append-child": "~1.0.0",
    "bankai": "^2.0.2",
    "browserify": "^13.0.1",
    "browserify-istanbul": "^2.0.0",
    "bundle-collapser": "^1.2.1",
    "dependency-check": "^2.5.1",
    "disc": "^1.3.2",
    "envify": "^3.4.1",
    "es2020": "^1.0.1",
    "geval": "~2.1.1",
    "gzip-size-cli": "^1.0.0",
    "insert-css": "^0.2.0",
    "istanbul": "^0.4.4",
    "min-document": "~2.18.0",
    "pretty-bytes-cli": "^1.0.0",
    "proxyquire": "~1.7.10",
    "proxyquire-universal": "~1.0.8",
    "proxyquireify": "~3.2.0",
    "server-router": "^2.1.0",
    "sheetify": "^5.0.0",
    "standard": "^7.1.0",
    "tachyons": "^4.0.0-beta.19",
    "tape": "^4.5.1",
    "tape-istanbul": "~1.0.2",
    "tape-run": "~2.1.4",
    "uglifyify": "^3.0.2",
    "uglifyjs": "^2.4.10",
    "unassertify": "^2.0.3",
    "yo-yoify": "^3.1.0",
    "zuul": "github:toddself/zuul"
  },
  "readme": "<h1 align=\"center\">choo</h1>\n\n<div align=\"center\">\n  :steam_locomotive::train::train::train::train::train:\n</div>\n<div align=\"center\">\n  <strong>Fun functional programming</strong>\n</div>\n<div align=\"center\">\n  A <code>5kb</code> framework for creating sturdy frontend applications\n</div>\n\n<br />\n\n<div align=\"center\">\n  <!-- Stability -->\n  <a href=\"https://nodejs.org/api/documentation.html#documentation_stability_index\">\n    <img src=\"https://img.shields.io/badge/stability-experimental-orange.svg?style=flat-square\"\n      alt=\"API stability\" />\n  </a>\n  <!-- NPM version -->\n  <a href=\"https://npmjs.org/package/choo\">\n    <img src=\"https://img.shields.io/npm/v/choo.svg?style=flat-square\"\n      alt=\"NPM version\" />\n  </a>\n  <!-- Build Status -->\n  <a href=\"https://travis-ci.org/yoshuawuyts/choo\">\n    <img src=\"https://img.shields.io/travis/yoshuawuyts/choo/master.svg?style=flat-square\"\n      alt=\"Build Status\" />\n  </a>\n  <!-- Test Coverage -->\n  <a href=\"https://codecov.io/github/yoshuawuyts/choo\">\n    <img src=\"https://img.shields.io/codecov/c/github/yoshuawuyts/choo/master.svg?style=flat-square\"\n      alt=\"Test Coverage\" />\n  </a>\n  <!-- Downloads -->\n  <a href=\"https://npmjs.org/package/choo\">\n    <img src=\"https://img.shields.io/npm/dm/choo.svg?style=flat-square\"\n      alt=\"Downloads\" />\n  </a>\n  <!-- Standard -->\n  <a href=\"https://codecov.io/github/yoshuawuyts/choo\">\n    <img src=\"https://img.shields.io/badge/code%20style-standard-brightgreen.svg?style=flat-square\"\n      alt=\"Standard\" />\n  </a>\n</div>\n\n<div align=\"center\">\n  <h3>\n    <a href=\"https://github.com/yoshuawuyts/choo-handbook\">\n      Handbook\n    </a>\n    <span> | </span>\n      <a href=\"https://github.com/YerkoPalma/awesome-choo\">\n        Ecosystem\n      </a>\n    <span> | </span>\n      <a href=\"https://github.com/trainyard/choo-cli\">\n        CLI\n      </a>\n    <span> | </span>\n    <a href=\"https://github.com/yoshuawuyts/choo/blob/master/.github/CONTRIBUTING.md\">\n      Contributing\n    </a>\n    <span> | </span>\n    <a href=\"https://webchat.freenode.net/?channels=choo\">\n      Chat\n    </a>\n  </h3>\n</div>\n\n<div align=\"center\">\n  <sub>The little framework that could. Built with ❤︎ by\n  <a href=\"https://twitter.com/yoshuawuyts\">Yoshua Wuyts</a> and\n  <a href=\"https://github.com/yoshuawuyts/choo/graphs/contributors\">\n    contributors\n  </a>\n</div>\n\n<h2>Table of Contents</h2>\n<details>\n  <summary>Table of Contents</summary>\n  <li><a href=\"#features\">Features</a></li>\n  <li><a href=\"#demos\">Demos</a></li>\n  <li><a href=\"#example\">Example</a></li>\n  <li><a href=\"#philosophy\">Philosophy</a></li>\n  <li><a href=\"#concepts\">Concepts</a></li>\n  <li><a href=\"#badges\">Badges</a></li>\n  <li><a href=\"#api\">API</a></li>\n  <li><a href=\"#faq\">FAQ</a></li>\n  <li><a href=\"#installation\">Installation</a></li>\n  <li><a href=\"#see-also\">See Also</a></li>\n</details>\n\n## Features\n- __minimal size:__ weighing `5kb`, `choo` is a tiny little framework\n- __single state:__ immutable single state helps reason about changes\n- __small api:__ with only 6 methods, there's not a lot to learn\n- __minimal tooling:__ built for the cutting edge `browserify` compiler\n- __transparent side effects:__ using `effects` and `subscriptions` brings\n  clarity to IO\n- __omakase:__ composed out of a balanced selection of open source packages\n- __isomorphic:__ renders seamlessly in both Node and browsers\n- __very cute:__ choo choo!\n\n## Demos\n- :truck: [Input example](http://requirebin.com/?gist=229bceda0334cf30e3044d5f5c600960)\n  ([repo](examples/title/))\n- :water_buffalo: [HTTP effects example](https://fork-fang.hyperdev.space/)\n  ([repo](https://hyperdev.com/#!/project/fork-fang))\n- :mailbox: [Mailbox routing](examples/mailbox/)\n- :ok_hand: [TodoMVC](http://shuheikagawa.com/todomvc-choo/)\n  ([repo](https://github.com/shuhei/todomvc-choo))\n- :fire: [Choo-firebase](https://github.com/mw222rs/choo-firebase)\n- :seedling: [Grow](https://grow.static.land/)\n  ([repo](https://github.com/sethvincent/grow))\n\n_note: If you've built something cool using `choo` or are using it in\nproduction, we'd love to hear from you!_\n\n## Example\nLet's create an input box that changes the content of a textbox in real time.\n[Click here to see the app running](http://requirebin.com/?gist=229bceda0334cf30e3044d5f5c600960).\n```js\nconst html = require('choo/html')\nconst choo = require('choo')\nconst app = choo()\n\napp.model({\n  state: { title: 'Not quite set yet' },\n  reducers: {\n    update: (data, state) => ({ title: data })\n  }\n})\n\nfunction mainView (state, prev, send) {\n  return html`\n    <main>\n      <h1>Title: ${state.title}</h1>\n      <input\n        type=\"text\"\n        oninput=${(e) => send('update', e.target.value)}>\n    </main>\n  `\n}\n\napp.router(['/', mainView])\n\nconst tree = app.start()\ndocument.body.appendChild(tree)\n```\n\nTo run it, save it as `client.js` and run with [budo][budo] and\n[es2020][es2020]. These tools are convenient but any [browserify][browserify]\nbased tool should do:\n```sh\n$ budo client.js -p 8080 --open -- -t es2020\n```\n\nAnd to save the output to files so it can be deployed, open a new terminal and\ndo:\n```bash\n$ mkdir -p 'dist/'\n$ curl 'localhost:8080' > 'dist/index.html'\n$ curl 'localhost:8080/client.js' > 'dist/client.js'\n```\nAll using a couple of shell commands and `.js` files, no grandiose boilerplate\nneeded.\n\n## Philosophy\nWe believe programming should be fun and light, not stern and stressful. It's\ncool to be cute; using serious words without explaining them doesn't make for\nbetter results - if anything it scares people off. We don't want to be scary,\nwe want to be nice and fun, and then _casually_ be the best choice around.\n_Real casually._\n\nWe believe frameworks should be disposable, and components recyclable. We don't\nlike the current state of web development where walled gardens jealously\ncompete with one another. We want you to be free, not shackled to a damp\ndungeon wall. By making the DOM the lowest common denominator, switching from\none framework to another becomes frictionless. Components should run anywhere\nthat has a DOM, regardless of the framework. `choo` is modest in its design; we\ndon't believe it will be top of the class forever, so we've made it as easy to\ntoss out as it is to pick up.\n\nWe don't believe that bigger is better. Big APIs, big dependencies, large file\nsizes - we see them as omens of impending userland complexity. We  want\neveryone on a team, no matter the size, to fully understand how an application\nis laid out. And once an application is built, we want it to be small,\nperformant and easy to reason about. All of which makes for easy to debug code,\nbetter results and super smiley faces.\n\n## Concepts\n`choo` cleanly structures internal data flow, so that all pieces of logic can\nbe combined into a nice, cohesive machine. Internally all logic lives within\n`models` that contain several properties. `subscriptions` are functions that\nare called at startup and have `send()` passed in, so they act as read-only\nsources of data. `effects` react to changes, perform an `action` and can then\npost the results. `reducers` take data, modify it, and update the internal\n`state`.\n\nCommunication of data is done using something called `actions`. Each `action`\nconsists of a unique `actionName` and an optional payload of `data`, which can\nbe any value.\n\nWhen a `reducer` modifies `state`, the `router` is called, which in turn calls\n`views`. `views` take `state` and return [DOM][dom] nodes which are then\nefficiently rendered on the screen.\n\nIn turn when the `views` are rendered, the `user` can interact with elements by\nclicking on them, triggering `actions` which then flow back into the\napplication logic. This is the _unidirectional_ architecture of `choo`.\n```txt\n ┌─────────────────┐\n │  Subscriptions ─┤     User ───┐\n └─ Effects  ◀─────┤             ▼\n ┌─ Reducers ◀─────┴──Actions── DOM ◀┐\n │                                   │\n └▶ Router ─────State ───▶ Views ────┘\n```\n- __user:__ 🙆\n- __DOM:__ the [Document Object Model][dom] is what is currently displayed in\n  your browser\n- __actions:__ a named event with optional properties attached. Used to call\n  `effects` and `reducers` that have been registered in `models`\n- __model:__ optionally namespaced object containing `subscriptions`,\n  `effects`, `reducers` and initial `state`\n- __subscriptions:__ read-only data sources that emit `actions`\n- __effects:__ asynchronous functions that emit an `action` when done\n- __reducers:__ synchronous functions that modify `state`\n- __state:__ a single object that contains __all__ the values used in your\n  application\n- __router:__ determines which `view` to render\n- __views:__ take `state` and returns a new `DOM tree` that is rendered in the\n  browser\n\n### Models\n`models` are objects that contain initial `state`, `subscriptions`, `effects`\nand `reducers`. They're generally grouped around a theme (or domain, if you\nlike). To provide some sturdiness to your `models`, they can either be\nnamespaced or not. Namespacing means that only state within the model can be\naccessed. Models can still trigger actions on other models, though it's\nrecommended to keep that to a minimum.\n\nSo say we have a `todos` namespace, an `add` reducer and a `todos` model.\nOutside the model they're called by `send('todos:add')` and\n`state.todos.items`. Inside the namespaced model they're called by\n`send('todos:add')` and `state.items`. An example namespaced model:\n```js\nconst app = choo()\napp.model({\n  namespace: 'todos',\n  state: { items: [] },\n  reducers: {\n    add: (data, state) => ({ items: state.items.concat(data.payload) })\n  }\n})\n```\n\nIn most cases using namespaces is beneficial, as having clear boundaries makes\nit easier to follow logic. But sometimes you need to call `actions` that\noperate over multiple domains (such as a \"logout\" `action`), or have a\n`subscription` that might trigger multiple `reducers` (such as a `websocket`\nthat calls a different `action` based on the incoming data).\n\nIn these cases you probably want to have a `model` that doesn't use namespaces,\nand has access to the full application state. Try and keep the logic in these\n`models` to a minimum, and declare as few `reducers` as possible. That way the\nbulk of your logic will safely shielded, with only a few points touching every\npart of your application.\n\n### Effects\nSide effects are done through `effects` declared in `app.model()`. Unlike\n`reducers` they cannot modify the state by returning objects, but get a\ncallback passed which is used to emit `actions` to handle results. Use effects\nevery time you don't need to modify the state object directly, but wish to\nrespond to an action.\n\nA typical `effect` flow looks like:\n\n1. An action is received\n2. An effect is triggered\n3. The effect performs an async call\n4. When the async call is done, either a success or error action is emitted\n5. A reducer catches the action and updates the state\n\nExamples of effects include: performing\n[xhr](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest) requests\n(server requests), calling multiple `reducers`, persisting state to\n[localstorage][localstorage].\n\n```js\nconst http = require('choo/http')\nconst choo = require('choo')\nconst app = choo()\napp.model({\n  namespace: 'todos',\n  state: { items: [] },\n  effects: {\n    addAndSave: (data, state, send, done) => {\n      http.post('/todo', {body: data.payload, json: true}, (err, res, body) => {\n        data.payload.id = body.id\n        send('todos:add', data, done)\n      })\n    }\n  },\n  reducers: {\n    add: (data, state) => ({ items: state.items.concat(data.payload) })\n  }\n})\n```\n\nWhen an `effect` is done executing, it should call the `done(err, res)`\ncallback. This callback used to communicate when an `effect` is done, handle\npossible errors and send values back to the caller. You'll probably notice when\napplications become more complex, that composing multiple namespaced models\nusing higher level effects becomes real powerful - without becoming\ncomplicated.\n\n### Subscriptions\nSubscriptions are a way of receiving data from a source. For example when\nlistening for events from a server using `SSE` or `Websockets` for a\nchat app, or when catching keyboard input for a videogame.\n\nAn example subscription that logs `\"dog?\"` every second:\n```js\nconst app = choo()\napp.model({\n  namespace: 'app',\n  subscriptions: [\n    (send, done) => {\n      setInterval(() => {\n        send('app:print', { payload: 'dog?', myOtherValue: 1000 }, (err) => {\n          if (err) return done(err)\n        })\n      }, 1000)\n    }\n  ],\n  effects: {\n    print: (data, state) => console.log(data.payload)\n  }\n})\n```\nIf a `subscription` runs into an error, it can call `done(err)` to signal the\nerror to the error hook.\n\n### Router\nThe `router` manages which `views` are rendered at any given time. It also\nsupports rendering a default `view` if no routes match.\n\n```js\nconst app = choo()\napp.router('/404', (route) => [\n  route('/', require('./views/empty')),\n  route('/404', require('./views/error')),\n  route('/:mailbox', require('./views/mailbox'), [\n    route('/:message', require('./views/email'))\n  ])\n])\n```\n\nRoutes on the `router` are passed in as a nested array. This means that the\nentry point of the application also becomes a site map, making it easier to\nfigure out how views relate to each other.\n\nUnder the hood `choo` uses [sheet-router][sheet-router]. Internally the\ncurrently rendered route is kept in `state.app.location`. If you want to modify\nthe location programmatically the `reducer` for the location can be called\nusing `send('location:setLocation', { location: href })`. This will not work\nfrom within namespaced `models`, and usage should preferably be kept to a\nminimum. Changing views all over the place tends to lead to messiness.\n\n### Views\nViews are pure functions that return a DOM tree for the router to render. They’re passed the current state, and any time the state changes they’re run again with the new state.\n\nViews are also passed the `send` function, which they can use to dispatch actions that can update the state. For example, the DOM tree can have an `onclick` handler that dispatches an `add` action.\n\n```javascript\nconst view = (state, prev, send) => {\n  return html`\n    <div>\n      <h1>Total todos: ${state.todos.length}</h1>\n      <button onclick=${(e) => send('add', {title: 'demo'})}>\n        Add\n      </button>\n    </div>`\n}\n```\nIn this example, when the `Add` button is clicked, the view will dispatch an\n`add` action that the model’s `add` reducer will receive. [As seen\nabove](#models), the reducer will add an item to the state’s `todos` array. The\nstate change will cause this view to be run again with the new state, and the\nresulting DOM tree will be used to [efficiently patch the\nDOM](#does-choo-use-a-virtual-dom).\n\n### Plugins\nSometimes it's necessary to change the way `choo` itself works. For example to\nreport whenever an action is triggered, handle errors globally or perist state\nsomewhere. This is done through something called `plugins`. Plugins are objects\nthat contain `hook` functions and are passed to `app.use()`:\n\n```js\nconst log = require('choo-log')\nconst choo = require('choo')\nconst app = choo()\n\napp.use(log())\n\nconst tree = app.start()\ndocument.body.appendChild(tree)\n```\n\nGenerally people using `choo` shouldn't be too worried about the specifics of\n`plugins`, as the internal API is (unfortunatly by nesessity) quite complex.\nAfter all they're the most powerful way to modify a `choo` appliction.\n\n__:warning: Warning :warning:: plugins should only be used as a last resort.\nIt creates peer dependencies which makes upgrading versions and switching\nframeworks a lot harder. Please exhaust all other options before using\nplugins.__\n\nIf you want to learn more about creating your own `plugins`, and which `hooks`\nare available, head on over to [app.use()](#appusehooks).\n\n## Badges\nUsing `choo` in a project? Show off which version you've used using a badge:\n\n\n[![built with choo v3](https://img.shields.io/badge/built%20with%20choo-v3-ffc3e4.svg?style=flat-square)](https://github.com/yoshuawuyts/choo)\n```md\n[![built with choo v3](https://img.shields.io/badge/built%20with%20choo-v3-ffc3e4.svg?style=flat-square)](https://github.com/yoshuawuyts/choo)\n```\n\n## API\nThis section provides documentation on how each function in `choo` works. It's\nintended to be a technical reference. If you're interested in learning choo for\nthe first time, consider reading through the [handbook][handbook] or\n[concepts](#concepts) first :sparkles:\n\n### app = choo(opts)\nInitialize a new `choo` app. Takes an optional object of handlers that is\npassed to [app.use()](#appusehooks).\n\n### app.model(obj)\nCreate a new model. Models modify data and perform IO. Takes the following\narguments:\n- __namespace:__ namespace the model so that it cannot access any properties\n  and handlers in other models\n- __state:__ initial values of `state` inside the model\n- __reducers:__ synchronous operations that modify state. Triggered by\n  `actions`. Signature of `(data, state)`.\n- __effects:__ asynchronous operations that don't modify state directly.\n  Triggered by `actions`, can call `actions`. Signature of `(data, state,\n  send, done)`\n- __subscriptions:__ asynchronous read-only operations that don't modify state\n  directly. Can call `actions`. Signature of `(send, done)`.\n\n#### send(actionName, data?[,callback])\nSend a new action to the models with optional data attached. Namespaced models\ncan be accessed by prefixing the name with the namespace separated with a `:`,\ne.g. `namespace:name`.\n\nWhen sending data from inside a `model` it expects exactly three arguments: the name of the action you're calling, the data you want to send, and finally a callback to handle errors through the global `onError()` hook. So if you want to send two values, you'd have to either send an array or object containing them.\n\n#### done(err?, res?)\nWhen an `effect` or `subscription` is done executing, or encounters an error,\nit should call the final `done(err, res)` callback. If an `effect` was called\nby another `effect` it will call the callback of the caller. When an error\npropegates all the way to the top, the `onError` handler will be called,\nregistered in `choo(handlers)`. If no callback is registered, errors will\n`throw`.\n\n### app.router(defaultRoute?, (route) => [routes])\nCreates a new router. Takes a function that exposes a single `route` function,\nand that expects a tree of `routes` to be returned. See\n[`sheet-router`](https://github.com/yoshuawuyts/sheet-router) for full\ndocumentation. Registered views have a signature of `(state, prev, send)`,\nwhere `state` is the current `state`, `prev` is the last state, `state.params`\nis URI partials and `send()` can be called to trigger actions. If\n`defaultRoute` is passed in, that will be called if no paths match. If no\n`defaultRoute` is specified it will throw instead.\n\n### app.use(hooks)\nRegister an object of hooks on the application. This is useful to extend the\nway `choo` works, adding custom behavior and listeners. Generally returning\nobjects of `hooks` is done by returning them from functions (which we call\n`plugins` throughout the documentation).\n\nThere are several `hooks` that are picked up by `choo`:\n- __onError(err, state, createSend):__ called when an `effect` or\n  `subscription` emit an error. If no handler is passed, the default handler\n  will `throw` on each error.\n- __onAction(action, state, name, caller, createSend):__ called when an\n  `action` is fired.\n- __onStateChange(action, state, prev, caller, createSend):__ called after a\n  reducer changes the `state`.\n\n__:warning: Warning :warning:: plugins should only be used as a last resort.\nIt creates peer dependencies which makes upgrading versions and switching\nframeworks a lot harder. Please exhaust all other options before using\nplugins.__\n\n`createSend()` is a special function that allows the creation of a new named\n`send()` function. The first argument should be a string which is the name, the\nsecond argument is a boolean `callOnError` which can be set to `true` to call\nthe `onError` hook istead of a provided callback. It then returns a\n`send(actionName, data?)` function.\n\nHooks should be used with care, as they're the most powerful interface into\nthe state. For application level code it's generally recommended to delegate to\nactions inside models using the `send()` call, and only shape the actions\ninside the hooks.\n\n### html = app.toString(route, state?)\nRender the application to a string of HTML. Useful for rendering on the server.\nFirst argument is a path that's passed to the router. Second argument is an\noptional state object. When calling `.toString()` instead of `.start()`, all\ncalls to `send()` are disabled, and `subscriptions`, `effects` and `reducers`\naren't loaded.\n\n### tree = app.start(opts)\nStart the application. Returns a tree of DOM nodes that can be mounted using\n`document.body.appendChild()`. Opts can contain the following values:\n- __opts.history:__ default: `true`. Enable a `subscription` to the browser\n  history API. e.g. updates the internal `location.href` state whenever the\n  browsers \"forward\" and \"backward\" buttons are pressed.\n- __opts.href:__ default: `true`. Handle all relative `<a\n  href=\"<location>\"></a>` clicks and update internal `state.location`\n  accordingly.\n- __opts.hash:__ default: `false`. Enable a `subscription` to the hash change\n  event, updating the internal `state.location` state whenever the URL hash\n  changes (eg `localhost/#posts/123`). Enabling this option automatically\n  disables `opts.history` and `opts.href`.\n\n### view = require('choo/html')\\`html\\`\nTagged template string HTML builder. Built on top of [yo-yo][yo-yo], [bel][bel]\nand [hyperx][hyperx]. To register a view on the `router` it should be wrapped\nin a function with the signature of `(state, prev, send)` where `state` is the\ncurrent `state`, `prev` is the last state, `state.params` is URI partials and\n`send()` can be called to trigger actions.\n\nTo create listeners for events, create interpolated attributes on elements.\n```js\nconst html = require('choo/html')\nhtml`\n  <button onclick=${(e) => console.log(e)}>click for bananas</button>\n`\n```\nExample listeners include: `onclick`, `onsubmit`, `oninput`, `onkeydown`,\n`onkeyup`. A full list can be found [at the yo-yo\nrepo](https://github.com/maxogden/yo-yo/blob/master/update-events.js). When\ncreating listeners always remember to call `e.preventDefault()` on the event so\nit doesn't bubble up and do stuff like refreshing the full page or the like.\n\nTo trigger lifecycle events on any part of a view, set the `onload=${(el) =>\n{}}` and `onunload=${() => {el}}` attributes. These parameters are useful when\ncreating self-contained widgets that take care of their own state and lifecycle\n(e.g. a maps widget) or to trigger animations. Most elements shouldn't have a\nneed for these hooks though.\n\n## FAQ\n### Why is it called choo?\nBecause I thought it sounded cute. All these programs talk about being\n_\"performant\"_, _\"rigid\"_, _\"robust\"_ - I like programming to be light, fun and\nnon-scary. `choo` embraces that.\n\nAlso imagine telling some business people you chose to rewrite something\ncritical to the company using `choo`.\n:steam_locomotive::train::train::train:\n\n### Why is it a framework, and not a library?\nI love small libraries that do one thing well, but when working in a team,\nhaving an undocumented combination of packages often isn't great. `choo()` is a\nsmall set of packages that work well together, wrapped in an an architectural\npattern. This means you get all the benefits of small packages, but get to be\nproductive right from the start without needing to plough through layers of\nboilerplate.\n\n### Is it called choo, choo.js or...?\nIt's called \"choo\", though we're fine if you call it \"choo-choo\" or\n\"chugga-chugga-choo-choo\" too. The only time \"choo.js\" is tolerated is if /\nwhen you shimmy like you're a locomotive.\n\n### How does choo compare to X?\nAh, so this is where I get to rant. `choo` (_chugga-chugga-chugga-choo-choo!_)\nwas built because other options didn't quite cut it for me, so instead of\npresenting some faux-objective chart with skewed benchmarks and checklists I'll\ngive you my opinions directly. Ready?  Here goes:\n- __react:__ despite being at the root of a giant paradigm shift for frontend\n  (thank you forever!), `react` is kind of big (`155kb` was it?). They also\n  like classes a lot, and enforce a _lot_ of abstractions. It also encourages\n  the use of `JSX` and `babel` which break _JavaScript, The Language™_. And all\n  that without making clear how code should flow, which is crucial in a team\n  setting. I don't like complicated things and in my view `react` is one of\n  them. `react` is not for me.\n- __mithril:__ never used it, never will. I didn't like the API, but if you\n  like it maybe it's worth a shot - the API seems small enough. I wouldn't know\n  how pleasant it is past face value.\n- __preact:__ a pretty cool idea; seems to fix most of what is wrong with\n  `react`. However it doesn't fix the large dependencies `react` seems to use\n  (e.g. `react-router` and friends) and doesn't help at all with architecture.\n  If `react` is your jam, and you will not budge, sitting at `3kb` this is\n  probably a welcome gift.\n- __angular:__ definitely not for me. I like small things with a clear mental\n  model; `angular` doesn't tick any box in my book of nice things.\n- __angular2:__ I'm not sure what's exactly changed, but I know the addition of\n  `TypeScript` and `RxJS` definitely hasn't made things simpler. Last I checked\n  it was `~200kb` in size before including some monstrous extra deps. I guess\n  `angular` and I will just never get along.\n- __mercury:__ ah, `mercury` is an interesting one. It seemed like a brilliant\n  idea until I started using it - the abstractions felt heavy, and it took team\n  members a long time to pick up. In the end I think using `mercury` helped\n  shaped `choo` greatly, despite not working out for me.\n- __deku:__ `deku` is fun. I even contributed a bit in the early days. It could\n  probably best be described as \"a functional version of `react`\". The\n  dependence on `JSX` isn't great, but give it a shot if you think it looks\n  neat.\n- __cycle:__ `cycle`'s pretty good - unlike most frameworks it lays out a clear\n  architecture which helps with reasoning about it. That said, it's built on\n  `virtual-dom` and `RxJS` which are a bit heavy for my taste. `choo` works\n  pretty well for FRP style programming, but something like [inu][inu] might be\n  an interesting alternative.\n- __vue:__ like `cycle`, `vue` is pretty good. But it also uses tech that\n  provides framework lock in, and additionally doesn't have a clean enough\n  architecture. I appreciate what it does, but don't think it's the answer.\n\n### Why can't send() be called on the server?\nIn Node, `reducers`, `effects` and `subscriptions` are disabled for performance\nreasons, so if `send()` was called to trigger an action it wouldn't work. Try\nfinding where in the DOM tree `send()` is called, and disable it when called\nfrom within Node.\n\n### Which packages was choo built on?\n- __views:__ [`yo-yo`](https://github.com/maxogden/yo-yo),\n  [`bel`](https://github.com/shama/bel)\n- __models:__ [`barracks`](https://github.com/yoshuawuyts/barracks),\n  [`xtend`](https://github.com/raynos/xtend)\n- __routes:__ [`sheet-router`](https://github.com/yoshuawuyts/sheet-router)\n- __http:__ [`xhr`](https://github.com/Raynos/xhr)\n\n### Does choo use a virtual-dom?\n`choo` uses [morphdom][morphdom], which diffs real DOM nodes instead of virtual\nnodes. It turns out that [browsers are actually ridiculously good at dealing\nwith DOM nodes][morphdom-bench], and it has the added benefit of working with\n_any_ library that produces valid DOM nodes. So to put a long answer short:\nwe're using something even better.\n\n### How can I optimize choo?\n`choo` really shines when coupled with `browserify` transforms. They can do\nthings like reduce file size, prune dependencies and clean up boilerplate code.\nConsider running some of the following:\n- [unassertify](https://github.com/twada/unassertify) - remove `assert()`\n  statements which reduces file size. Use as a `--global` transform\n- [es2020](https://github.com/yoshuawuyts/es2020) - backport `const`,\n  `fat-arrows` and `template strings` to older browsers. Should be run as a\n  `--global` transform\n- [yo-yoify](https://github.com/shama/yo-yoify) - replace the internal `hyperx`\n  dependency with `document.createElement` calls; greatly speeds up performance\n  too\n- [uglifyify](https://github.com/hughsk/uglifyify) - minify your code using\n  UglifyJS2. Use as a `--global` transform\n- [bulkify](https://www.npmjs.com/package/bulkify) - transform inline\n  [bulk-require](https://www.npmjs.com/package/bulk-require) calls into\n  statically resolvable require maps\n- [envify](https://github.com/hughsk/envify) - replace `process.env` values\n  with plain strings\n\n### Choo + Internet Explorer &amp; Safari\nOut of the box `choo` only supports runtimes which support:\n* `const`\n* `fat-arrow` functions (e.g. `() => {}`)\n* `template-strings`\n\nThis does not include Safari 9 or any version of IE. If support for these\nplatforms is required you will have to provide some sort of transform that\nmakes this functionality available in older browsers.  The test suite uses\n[es2020](https://github.com/yoshuawuyts/es2020) as a global transform, but\nanything else which might satisfy this requirement is fair game.\n\nGenerally for production builds you'll want to run:\n```sh\n$ NODE_ENV=production browserify \\\n  -t envify \\\n  -g yo-yoify \\\n  -g unassertify \\\n  -g es2020 \\\n  -g uglifyify \\\n  | uglifyjs\n```\n\n## Hey, doesn't this look a lot like Elm?\nYup, it's greatly inspired by the `elm` architecture. But contrary to `elm`,\n`choo` doesn't introduce a completely new language to build web applications.\n\n### Is it production ready?\nSure.\n\n## Browser Test Status\n<a href=\"https://saucelabs.com/u/yoshuawuyts\">\n  <img\n    src=\"https://saucelabs.com/browser-matrix/yoshuawuyts.svg\"\n    alt=\"Sauce Test Status\"/>\n</a>\n\n## Installation\n```sh\n$ npm install choo\n```\n\n## See Also\n- [choo-handbook](https://github.com/yoshuawuyts/choo-handbook) - the little\n  `choo` guide\n- [awesome-choo](https://github.com/YerkoPalma/awesome-choo) - Awesome things\n  related with choo framework\n- [budo](https://github.com/mattdesl/budo) - quick prototyping tool for\n  `browserify`\n- [stack.gl](http://stack.gl/) - open software ecosystem for WebGL\n- [yo-yo](https://github.com/maxogden/yo-yo) - tiny library for modular UI\n- [bel](https://github.com/shama/bel) - composable DOM elements using template\n  strings\n- [tachyons](https://github.com/tachyons-css/tachyons) - functional CSS for\n  humans\n- [sheetify](https://github.com/stackcss/sheetify) - modular CSS bundler for\n  `browserify`\n- [pull-stream](https://github.com/pull-stream/pull-stream) - minimal streams\n- [es2020](https://github.com/yoshuawuyts/es2020) - because in hindsight we\n  don't need most of ES6\n\n## License\n[MIT](https://tldrlegal.com/license/mit-license)\n\n[dom]: https://en.wikipedia.org/wiki/Document_Object_Model\n[keyboard-support]: https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Browser_compatibility\n[sse]: https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events\n[ws]: https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API\n[isomorphic]: https://en.wikipedia.org/wiki/Isomorphism\n[big-o]: https://rob-bell.net/2009/06/a-beginners-guide-to-big-o-notation/\n[qps]: https://en.wikipedia.org/wiki/Queries_per_second\n[morphdom]: https://github.com/patrick-steele-idem/morphdom\n[morphdom-bench]: https://github.com/patrick-steele-idem/morphdom#benchmarks\n[module-parent]: https://nodejs.org/dist/latest-v6.x/docs/api/modules.html#modules_module_parent\n[sse-reconnect]: http://stackoverflow.com/questions/24564030/is-an-eventsource-sse-supposed-to-try-to-reconnect-indefinitely\n[ws-reconnect]: http://stackoverflow.com/questions/13797262/how-to-reconnect-to-websocket-after-close-connection\n[bl]: https://github.com/rvagg/bl\n[varnish]: https://varnish-cache.org\n[nginx]: http://nginx.org/\n[dom]: https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model\n[sheet-router]: https://github.com/yoshuawuyts/sheet-router\n[html-input]: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input\n[inu]: https://github.com/ahdinosaur/inu\n[yo-yo]: https://github.com/maxogden/yo-yo\n[bel]: https://github.com/shama/bel\n[hyperx]: https://github.com/substack/hyperx\n[budo]: https://github.com/mattdesl/budo\n[es2020]: https://github.com/yoshuawuyts/es2020\n[browserify]: https://github.com/substack/browserify\n[localstorage]: https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage\n[handbook]: https://github.com/yoshuawuyts/choo-handbook\n",
  "readmeFilename": "README.md",
  "gitHead": "1c4b27b57e165ebbb7dbdff39d54bc9e13e7110a",
  "bugs": {
    "url": "https://github.com/yoshuawuyts/choo/issues"
  },
  "homepage": "https://github.com/yoshuawuyts/choo#readme",
  "_id": "choo@4.0.0-0",
  "_shasum": "fb18635165e67cd333fcf18530e2b0ad58d73abc",
  "_from": "choo@4.0.0-0"
}
